@model Pedido
@{
    ViewData["Title"] = "Novo Pedido";
}

<div class="text-center mb-3">
    <h1 class="display-4">Cadastro de Pedido</h1>
</div>

<div class="row justify-content-md-center">
    <div class="col-12 col-sm-10 border rounded shadow-sm p-3">
        <form asp-action="CadastroPedido" method="post" autocomplete="off">
            <input type="hidden" asp-for="Id" />

            <div class="form-group">
                <label asp-for="IdCliente"></label>
                @{
                    var clientes = (List<Cliente>)ViewBag.clientes;
                    var clientesList = clientes.OrderBy(p => p.Nome).Select(p => new SelectListItem(p.Nome, p.Id + "", Model.IdCliente == p.Id));
                }
                <select id="IdCliente" name="IdCliente" asp-items="clientesList">
                    <option></option>
                </select>
            </div>

            <div class="form-group">
                <label>Produtos do Pedido</label><br />
                <a class="btn btn-outline-primary modal-trigger" style="cursor:pointer" href="#modalProduto"> <span class="produtoQtde">0</span> Produto(s) cadastrados</a>
            </div>


            <div class="form-group">
                <label asp-for="DataEntrega"></label>
                <input asp-for="DataEntrega" value="@(Model.DataEntrega == null ? "" : Model.DataEntrega.ToString("yyyy-MM-dd") )" type="date" class="form-control" />
            </div>

            <div class="form-group">
                @{
                    var selectlist = Html.GetEnumSelectList<ControlProduct.Models.Enum.TipoEntrega>().ToList();
                    foreach (var selecteditem in selectlist)
                    {
                        if (selecteditem.Text == Model.TipoEntrega.ToString())
                            selecteditem.Selected = true;
                    }
                }
                <label asp-for="TipoEntrega"></label>
                <select id="TipoEntrega" name="TipoEntrega" asp-items="selectlist">
                </select>
            </div>

            <div id="formularioEntrega" class="mb-4">
                <div class="form-group">
                    <label asp-for="EnderecoEntrega"></label>
                    <input asp-for="EnderecoEntrega" class="form-control" />
                </div>

                <div class="form-group">
                    <label asp-for="ValorEntrega"></label>
                    <input asp-for="ValorEntrega" class="form-control moneyMask" onchange="updateTotal()" />
                </div>
            </div>

            <div class="form-group">
                <label>Pagamento</label><br />
                <label class="mr-4 text-dark">
                    <input class="with-gap" name="radioPagamento" type="radio" value="@((int)ControlProduct.Models.Enum.EstadoPedido.PAGO)"
                           @{if (ControlProduct.Models.Enum.EstadoPedido.PAGO == Model.Estado) { @Html.Raw("checked")  } } />
                    <span>Valor já pago</span>
                </label>
                <label class="text-dark">
                    <input class="with-gap" name="radioPagamento" type="radio" value="@((int)ControlProduct.Models.Enum.EstadoPedido.PENDENTE)"
                           @{if (ControlProduct.Models.Enum.EstadoPedido.PENDENTE == Model.Estado) { @Html.Raw("checked")  } } />
                    <span>Pagamento parcial</span>
                </label>
                @{
                    double valorpago;
                    if (Model.Pagamentos != null)
                    {
                        var pagamento = Model.Pagamentos.FirstOrDefault();
                        valorpago = pagamento == null ? 0 : pagamento.Valor;
                    }
                    else
                        valorpago = 0;
                }
                <input class="moneyMask pagamentoParcial ml-4" style="width:200px" type="text" name="Pagamentos[0].Valor" value="@valorpago" @{if (ControlProduct.Models.Enum.EstadoPedido.PENDENTE != Model.Estado) { @Html.Raw("disabled")  } } />
            </div>
            <hr />

            <div class="form-group">
                <label>Preço do pedido:</label><br />
                <span class="form-control font-weight-bold precoTotal" style="width:200px">Total: R$10,00</span>
            </div>

            <button type="submit" class="btn btn-primary">@(Model.Id != 0 ? "Atualizar" : "Cadastrar")</button>
            @if (Model.Id != 0)
            {
                <a asp-action="RemoverPedido" asp-route-idPedido="@Model.Id" class="btn btn-danger">Excluir</a>
            }

            <div class="error-list pt-3"></div>
        </form>
    </div>
</div>

<div id="modalProduto" class="modal custom-modal shadow-sm rounded border">
    <div class="row">
        <div class="col-5 border-right p-3">
            <h4>Lista de Produtos</h4>
            @{
                var categorias = (List<Categoria>)ViewBag.categorias;
            }
            <div id="categoriasList" class="row">
                @for (var i = 0; i < categorias.Count; i++)
                {
                    <div class="col-4 categoriaButton collapsed p-1" data-toggle="collapse" data-target="#cat@(i)" aria-expanded="false" aria-controls="cat@(i)">
                        <span class="btn btn-outline-primary w-100">
                            @categorias[i].Nome
                        </span>
                    </div>

                    <div id="cat@(i)" class="collapse collapsed col-12 produtosList" data-parent="#categoriasList">
                        <div class="card-body">
                            @if (categorias[i].Produtos.Where(p => p.Ativo == ControlProduct.Models.Enum.EstadoProduto.ATIVO).Any())
                            {
                                @foreach (var prod in categorias[i].Produtos.Where(p => p.Ativo == ControlProduct.Models.Enum.EstadoProduto.ATIVO))
                                {
                                    <span class="waves-effect waves-teal btn-small btn-flat" style="width:100%" onclick="addProduto(@prod.Id, `@prod.Nome`, @prod.Valor)">@prod.Nome</span><br />
                                    <hr />
                                }
                            }
                            else
                            {
                                <i>Não há produtos nesta categoria</i><br />
                                <hr />
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="col-7 p-3">
            <h4>Produtos do pedido</h4>

            <div id="listaProdutoPedido">
                <div class="row produtoPedido">
                    <div class="col-12 col-xl-6 d-flex">
                        <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-x-circle-fill produto-remove-button" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                            <path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z" />
                        </svg>
                        <span class="form-control text-center produtoPedidoDesc" style="margin:auto">Prod 1 - R$ 10,00</span>
                    </div>
                    <div class="col-auto d-flex text-right">
                        <span style="margin:auto">Quantidade:</span>
                    </div>
                    <div class="col-auto text-right">
                        <input type="number" class="form-control m-0 produtoPedidoQtde" value="1" min="1" max="999" style="display:inline-block; width:100px" />
                    </div>
                </div>
            </div>

            <div class="row justify-content-center produto-modal-bottom-row">
                <div class="col-auto p-2">
                    <a class="btn btn-outline-primary modal-close" href="#modalProduto">Salvar Produtos</a>
                </div>
                <div class="col-auto p-2" style="width:200px">
                    <span class="form-control text-center precoTotal">Total: R$10,00</span>
                </div>
                <div class="col-auto p-2">
                    <span class="btn btn-outline-primary modal-trigger" href="#modalProdutoExtra">Novo Produto</span>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="modalProdutoExtra" class="modal shadow-sm rounded border mt-4">
    <div class="row p-4">
        <div class="col">
            <h4 class="text-muted">Adicionar produto extra</h4>

            <div class="form-group">
                <label>Nome</label>
                <input id="extraNome" class="form-control" />
            </div>

            <div class="form-group">
                <label>Valor</label>
                <input id="extraValor" class="form-control moneyMask" />
            </div>

            <span class="btn btn-primary" onclick="cadastrarProdutoExtra()">Salvar novo produto</span>
        </div>
    </div>
</div>


@section scripts{
    <partial name="_ValidationScriptsPartial" />
}


<script>
    var produtos = [];
    var produtosExtra = [];
    var produtoPedido = {};
    var clientes = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(((List<Cliente>)ViewBag.clientes).Select(p => new { p.Id, p.Endereco })));

    window.addEventListener("load", function () {
        setMoneyMask();

        $('input[type=radio][name=radioPagamento]').change(function () {
            if (this.value == @((int)ControlProduct.Models.Enum.EstadoPedido.PAGO))
                $(".pagamentoParcial").attr("disabled", true)
            else
                $(".pagamentoParcial").attr("disabled", false)
        });

        var formularioEntrega = $("#formularioEntrega *");
        @{ if (Model.TipoEntrega != ControlProduct.Models.Enum.TipoEntrega.ENTREGA) { @Html.Raw("formularioEntrega.remove();"); } }
        $("#TipoEntrega").change(function () {
                if (String.fromCharCode($(this).val()) == 'E') {
                $("#formularioEntrega").append(formularioEntrega);
                    setMoneyMask();
                    updateTotal();
                    setEnderecoCliente();
                }
                else {
                    formularioEntrega.remove();
                    updateTotal();
                }
            });

        $(".categoriaButton").on('click', function () {
            $('.categoriaButton').removeClass('col-12').addClass('col-4')

            if ($(this).hasClass('collapsed')) {
                $(this).removeClass('col-4').addClass('col-12')
            }
        });

        $(".datepicker").datepicker({
            format: "yyyy-mm-dd",
            i18n: {
                cancel: 'Cancelar',
                clear: 'Limpar',
                done: 'Ok',
                months: ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"],
                monthsShort: ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"],
                weekdays: ["Domingo","Segunda", "Terça", "Quarta", "Quinta", "Sexta", "Sábado"],
                weekdaysShort: ["Dom","Seg", "Ter", "Qua", "Qui", "Sex", "Sáb"],
                weekdaysAbbrev: ["D","S", "T", "Q", "Q", "S", "S"]
            }, });
        $(".modal").modal();

        produtoPedido = $(".produtoPedido");
        produtoPedido.remove();

        $('select').formSelect();
        updateTotal();


        $("form").submit(function (e) {
            e.preventDefault();
            $(this).validate().form();
            var errorList = $(this).validate().errorList;

            if (!errorList.length) {
                let data = getFormData($(this));
                $(".loading").removeClass("d-none");

                data.pedidoProdutos = produtos.map(p => { return { IdProduto: p.id, Quantidade: p.qtde * 1 } });
                data.extras = produtosExtra.map(p => { return { Id: p.id, Nome: p.nome, Valor: p.valor } });
                if (data.ValorEntrega) {
                    data.ValorEntrega = data.ValorEntrega.split("$")[1] * 1;
                }
                if (data.radioPagamento) {
                    data.Estado = data.radioPagamento;
                }
                if (data["Pagamentos[0].Valor"]) {
                    data["Pagamentos[0].Valor"] = data["Pagamentos[0].Valor"].split("$")[1] * 1;
                }
                data.Valor = $(".precoTotal").eq(0).html().split("$")[1].replace(",",".") * 1;
                console.log(data);
                $.ajax({
                    url: $(this).attr("action"),
                    method: "post",
                    data: data
                })
                    .done(function (d) {
                        $("#messageBox").find("h4").html("Sucesso!");
                        $("#messageBox").modal({ dismissible: false });
                        $("#messageBox").find("p").html("Cadastro do pedido realizado.<br>Redirecionando para a página principal...");
                        M.Modal.getInstance($("#messageBox")[0]).open()

                        setTimeout(function(){ window.location.href = d.route; }, 2000);
                    })
                    .fail(function (d) {
                        $("#messageBox").find("h4").html("Um erro ocorreu!");
                        $("#messageBox").find("p").html("Não foi possível cadastrar o pedido.<br>Verifique os dados e tente novamente.");
                        M.Modal.getInstance($("#messageBox")[0]).open()
                    })
                    .always(function (d) {
                        $(".loading").addClass("d-none");
                    });
            }
            else {
                $(".error-list").html("");
                for (var i in errorList) {
                    $(".error-list").append(`<p class='error-item text-danger'>${errorList[i].message}</p>`);
                }
            }
        });


        @{
            if (Model.PedidoProdutos != null)
            {
                var produtos = categorias.Select(p => p.Produtos).SelectMany(p => p);

                foreach (var produto in Model.PedidoProdutos)
                {
                    var selectedprod = produtos.Where(p => p.Id == produto.IdProduto).FirstOrDefault();
                    @Html.Raw($"addProduto({produto.IdProduto},'{selectedprod.Nome}',{selectedprod.Valor},{produto.Quantidade});");
                }
            }
            if (Model.Extras != null)
            {
                foreach (var extra in Model.Extras)
                {
                    @Html.Raw($"addProdutoExtra({extra.Id},'{extra.Nome}',{extra.Valor});");
                }
            }
        }
    });

    function getFormData($form) {

        var unindexed_array = $form.serializeArray();
        var indexed_array = {};

        $.map(unindexed_array, function(n, i){
            indexed_array[n['name']] = n['value'];
        });

        return indexed_array;
    }

    function addProduto(id, nome, valor, qtd) {
        if (!!!produtos.filter(p => p.id == id).length) {
            let qtde = !!qtd?qtd:1
            produtos.push({ "id": id, "nome": nome, "valor": valor, "qtde": qtde })
            let newPedidoProduto = produtoPedido.clone();
            $(newPedidoProduto).attr("id","pedidoProduto" + id);
            $(newPedidoProduto).find("svg").click(function () {
                removeProduto(id)
            });
            $(newPedidoProduto).find(".produtoPedidoDesc").html(prodDesc(nome, valor))
            $(newPedidoProduto).find(".produtoPedidoQtde").val(qtde);
            $(newPedidoProduto).find(".produtoPedidoQtde").change(function () {
                changeQtde(id, $(this).val())
            });

            $("#listaProdutoPedido").append(newPedidoProduto);
        }
        updateTotal();
    }

    function cadastrarProdutoExtra() {
        var nome = $("#extraNome").val();
        var valor = $("#extraValor").val().split("$")[1]*1;

        if (nome && valor * 0 == 0) {
            $("#extraNome").val("");
            $("#extraValor").val("");
            addProdutoExtra(0, nome, valor);
            M.Modal.getInstance($("#modalProdutoExtra")[0]).close();
        }
    }

    function addProdutoExtra(id, nome, valor) {

        let idInterno = id==0? new Date().getTime(): id;
        produtosExtra.push({ "id": id, "idInterno": idInterno, "nome": nome, "valor": valor, "qtde": 1 })
        let newPedidoProduto = produtoPedido.clone();
        $(newPedidoProduto).attr("id","produtoExtra" + idInterno);
        $(newPedidoProduto).find("svg").click(function () {
            removeProdutoExtra(idInterno)
        });
        $(newPedidoProduto).find(".produtoPedidoDesc").html(prodDesc(nome, valor))
        $(newPedidoProduto).find(".text-right").remove();


        $("#listaProdutoPedido").append(newPedidoProduto);

        updateTotal();
    }

    function changeQtde(id, qtde) {
        let produto = produtos.filter(p => p.id == id);
        if (produto.length) {
            produto = produtos[produtos.indexOf(produto[0])]
            produto.qtde = qtde;
            $("#pedidoProduto" + id).find(".produtoPedidoDesc").html(prodDesc(produto.nome, qtde * produto.valor));
        }
        updateTotal();
    }

    function prodDesc(nome, vl) {
        return nome + " - " + precoDesc(vl);
    }
    function precoDesc(vl) {
        return new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' }).format(vl).replace(String.fromCharCode(160), "").replace(".", "");
    }

    function removeProduto(id) {
        let remover = produtos.filter(p => p.id == id);
        if (remover.length) {
            produtos.splice(produtos.indexOf(remover[0]), 1);
            $("#pedidoProduto" + id).remove();
        }
        updateTotal();
    }

    function removeProdutoExtra(id) {
        let remover = produtosExtra.filter(p => p.idInterno == id);
        if (remover.length) {
            produtosExtra.splice(produtosExtra.indexOf(remover[0]), 1);
            $("#produtoExtra" + id).remove();
        }
        updateTotal();
    }

    function updateTotal() {
        let preco = produtos.reduce((acc, x) => acc + x.valor * x.qtde, 0);
        preco += produtosExtra.reduce((acc, x) => acc + x.valor, 0);

        let entregaPreco = $("#ValorEntrega").val();
        if (entregaPreco != undefined)
            preco += entregaPreco.split("$")[1] * 1;
        $(".precoTotal").html("Total: " + precoDesc(preco));
        $(".produtoQtde").html(produtos.length + produtosExtra.length);
    }

    function setEnderecoCliente() {
        let cliente = clientes.filter(p => p.Id == $("#IdCliente").val()*1)
        if (cliente.length) {
            $("#EnderecoEntrega").val(cliente[0].Endereco);
        }
    }
</script>